class Graph:
    def __init__(self, vertices):
        self.graph = {v: [] for v in range(vertices)}  # Initialize adjacency list
    
    def add_edge(self, u, v):
        """Add an undirected edge between u and v."""
        self.graph[u].append(v)
        self.graph[v].append(u)
    
    def display(self):
        """Display the adjacency list of the graph."""
        for node, neighbors in self.graph.items():
            print(f"{node}: {neighbors}")

def play_game(graph, start, target):
    """Simple graph traversal game."""
    visited = set()
    current_node = start
    player = 1  # Player 1 starts
    
    while current_node != target:
        print(f"\nPlayer {player}'s turn.")
        print(f"Current node: {current_node}")
        
        # Get unvisited neighbors
        unvisited_neighbors = [neighbor for neighbor in graph.graph[current_node] if neighbor not in visited]
        
        if not unvisited_neighbors:
            print(f"No moves left for Player {player}. Player {3 - player} wins!")
            return
        
        print(f"Unvisited neighbors: {unvisited_neighbors}")
        # Choose the first unvisited neighbor (simple AI, can be replaced with user input)
        move = unvisited_neighbors[0]
        print(f"Player {player} moves to {move}.")
        
        visited.add(current_node)  # Mark current node as visited
        current_node = move  # Move to the next node
        player = 3 - player  # Switch player (1 -> 2, 2 -> 1)
    
    print(f"\nPlayer {3 - player} reached the target {target}. Player {3 - player} wins!")

# Example usage
vertices = 6
graph = Graph(vertices)
edges = [(0, 1), (0, 2), (1, 3), (2, 3), (3, 4), (4, 5)]
for u, v in edges:
    graph.add_edge(u, v)

print("Graph structure:")
graph.display()

start_node = 0
target_node = 5
print("\nStarting the game...")
play_game(graph, start_node, target_node)
