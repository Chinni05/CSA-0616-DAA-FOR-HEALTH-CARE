class DisjointSet:
    """Disjoint Set (Union-Find) data structure to manage connected components."""
    def __init__(self, n):
        self.parent = list(range(n))
        self.rank = [0] * n

    def find(self, u):
        """Find the root of the set containing u."""
        if self.parent[u] != u:
            self.parent[u] = self.find(self.parent[u])  # Path compression
        return self.parent[u]

    def union(self, u, v):
        """Union the sets containing u and v."""
        root_u = self.find(u)
        root_v = self.find(v)

        if root_u != root_v:
            # Union by rank
            if self.rank[root_u] > self.rank[root_v]:
                self.parent[root_v] = root_u
            elif self.rank[root_u] < self.rank[root_v]:
                self.parent[root_u] = root_v
            else:
                self.parent[root_v] = root_u
                self.rank[root_u] += 1
            return True
        return False

def kruskal(n, edges):
    """Kruskal's algorithm to find the MST and check if it's unique."""
    # Sort edges by weight
    edges.sort(key=lambda edge: edge[2])
    
    # Disjoint Set for managing connected components
    ds = DisjointSet(n)
    
    mst = []
    mst_weight = 0
    is_unique = True  # Flag to check if the MST is unique
    
    for u, v, weight in edges:
        if ds.union(u, v):
            mst.append((u, v, weight))
            mst_weight += weight
        else:
            # If we encounter an edge that would form a cycle, check for uniqueness
            # If the weight of the edge is the same as the last included edge,
            # and it doesn't form a cycle, it means there are multiple possible edges
            # for the same step, implying the MST might not be unique.
            if mst and mst[-1][2] == weight:
                is_unique = False
    
    return mst, mst_weight, is_unique

# Example usage:
edges = [
    (0, 1, 10),
    (0, 2, 6),
    (0, 3, 5),
    (1, 3, 15),
    (2, 3, 4)
]

n = 4  # Number of vertices

mst, mst_weight, is_unique = kruskal(n, edges)

# Output the result
print("MST:", mst)
print("Total weight of MST:", mst_weight)
print("Is MST unique?", "Yes" if is_unique else "No")
