import numpy as np
import time
import os

def print_board(board):
    """Print the board."""
    os.system('clear')  # Clears the terminal
    for row in board:
        print("".join(['â– ' if cell else ' ' for cell in row]))
    time.sleep(0.1)

def update_board(board):
    """Update the board for the next generation."""
    new_board = np.zeros_like(board)
    rows, cols = board.shape

    for i in range(rows):
        for j in range(cols):
            live_neighbors = np.sum(board[max(i-1, 0):min(i+2, rows), max(j-1, 0):min(j+2, cols)]) - board[i, j]
            if board[i, j] == 1 and live_neighbors in [2, 3]:
                new_board[i, j] = 1
            elif board[i, j] == 0 and live_neighbors == 3:
                new_board[i, j] = 1
    return new_board

def game_of_life(initial_state, generations=10):
    """Run the Game of Life."""
    board = np.array(initial_state)
    for _ in range(generations):
        print_board(board)
        board = update_board(board)

# Example initial state
initial_state = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 1, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0]
]

game_of_life(initial_state, generations=20)
