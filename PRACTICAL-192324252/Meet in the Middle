from itertools import chain, combinations
def subsets(arr):
    """Generate all subsets of a given array."""
    return chain.from_iterable(combinations(arr, r) for r in range(len(arr) + 1))
def meet_in_the_middle(arr, target):
    n = len(arr)
    left_half = arr[:n//2]
    right_half = arr[n//2:]
    left_sums = {sum(subset) for subset in subsets(left_half)}
    right_sums = {sum(subset) for subset in subsets(right_half)}
    for left_sum in left_sums:
        if (target - left_sum) in right_sums:
            return True
    return False
arr = [3, 34, 4, 12, 5, 2]
target = 9
if meet_in_the_middle(arr, target):
    print(f"A subset with the target sum {target} exists.")
else:
    print(f"No subset with the target sum {target} exists.")
